# Application config file. Includes any file ./local/debiki.conf,
# so in that file you can override all settings defined here, e.g. datbase address.


# Miscellaneous
# =======================

# The application languages.
application.langs="en"

# Client cache expiration.
# See scripts/bump-assets-version.sh, which bumps a version number included
# in the URL path to JS and CSS files. The version number is bumped on
# deployment, so browsers download new file versions.
# (s-maxage = for shared proxies and CDNs.)
assets.defaultCache="max-age=31536000, s-maxage=31536000" # 1 year

trustxforwarded=true


# Security
# =======================

# POST request body length.
# Max length one byte forces me to specify reasonable max lengths, for all POST requests.
# For now, use 2000, so SecureSocial works. SECURITY COULD change back to 1.
parsers.text.maxLength=2000

# Secret key.
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="ik35ie5##k3ni5RSk/><<<irs3LuwMinkrsIEncvSl06390kre[[3ie4Ft/s]1qW"


# Database
# =======================

debiki.postgresql.server="localhost"
debiki.postgresql.port="5432"
debiki.postgresql.database="debiki_dev"
debiki.postgresql.user="debiki_dev"
debiki.postgresql.password="t0psecr3t"

# Test code is currently hardwired to database and user "debiki_test",
# password "auto-deleted", on localhost.


# Authentication
# =======================

# I think these default settings allows the server to start, but you won't be
# able to authenticate since no secret keys are included. Copy and override these
# settings in debiki.conf.

silhouette {

  # Facebook provider
  facebook.authorizationURL="https://graph.facebook.com/oauth/authorize"
  facebook.accessTokenURL="https://graph.facebook.com/oauth/access_token"
  facebook.redirectURL="http://localhost:9000/authenticate/facebook"
  facebook.clientID=""
  facebook.clientSecret=""
  facebook.scope="email"

  # Google provider
  google.authorizationURL="https://accounts.google.com/o/oauth2/auth"
  google.accessTokenURL="https://accounts.google.com/o/oauth2/token"
  google.redirectURL="http://localhost:9000/authenticate/google"
  google.clientID=""
  google.clientSecret=""
  google.scope="profile email"

  # Twitter provider
  twitter.requestTokenURL="https://twitter.com/oauth/request_token"
  twitter.accessTokenURL="https://twitter.com/oauth/access_token"
  twitter.authorizationURL="https://twitter.com/oauth/authenticate"
  twitter.callbackURL="http://localhost:9000/authenticate/twitter"
  twitter.consumerKey=""
  twitter.consumerSecret=""
}


# ElasticSearch logging
# =======================

# About logging: "When embedded, elasticsearch does not configure logging, it
# uses whatever logging system you use (slf4j, log4, jul). You should configure
# logging however you like (and the logging component names will start with
# org.elasticsearch)."
# Source: http://elasticsearch-users.115913.n3.nabble.com/Change-log-level-with-embedded-java-td2850255.html
# So have a look at  logger.xml  and prod-logger.xml  instead.
#
# Here's another email thread: "How to set up Search Slow Log for embedded ES"
# At: https://groups.google.com/forum/#!topic/elasticsearch/Ecki9SSrwOM


# Local settings
# =======================

include "local/debiki.conf"

